// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ngcode.proto

#include "ngcode.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace ngcode {
class AmfAusfRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AmfAusfRequest>
      _instance;
} _AmfAusfRequest_default_instance_;
class AmfAusfReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AmfAusfReply>
      _instance;
} _AmfAusfReply_default_instance_;
class AmfSmfRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AmfSmfRequest>
      _instance;
} _AmfSmfRequest_default_instance_;
class AmfSmfReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AmfSmfReply>
      _instance;
} _AmfSmfReply_default_instance_;
}  // namespace ngcode
namespace protobuf_ngcode_2eproto {
void InitDefaultsAmfAusfRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::ngcode::_AmfAusfRequest_default_instance_;
    new (ptr) ::ngcode::AmfAusfRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ngcode::AmfAusfRequest::InitAsDefaultInstance();
}

void InitDefaultsAmfAusfRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAmfAusfRequestImpl);
}

void InitDefaultsAmfAusfReplyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::ngcode::_AmfAusfReply_default_instance_;
    new (ptr) ::ngcode::AmfAusfReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ngcode::AmfAusfReply::InitAsDefaultInstance();
}

void InitDefaultsAmfAusfReply() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAmfAusfReplyImpl);
}

void InitDefaultsAmfSmfRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::ngcode::_AmfSmfRequest_default_instance_;
    new (ptr) ::ngcode::AmfSmfRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ngcode::AmfSmfRequest::InitAsDefaultInstance();
}

void InitDefaultsAmfSmfRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAmfSmfRequestImpl);
}

void InitDefaultsAmfSmfReplyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::ngcode::_AmfSmfReply_default_instance_;
    new (ptr) ::ngcode::AmfSmfReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ngcode::AmfSmfReply::InitAsDefaultInstance();
}

void InitDefaultsAmfSmfReply() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAmfSmfReplyImpl);
}

::google::protobuf::Metadata file_level_metadata[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ngcode::AmfAusfRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ngcode::AmfAusfRequest, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ngcode::AmfAusfRequest, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ngcode::AmfAusfRequest, imsi_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ngcode::AmfAusfRequest, plmn_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ngcode::AmfAusfRequest, num_autn_vec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ngcode::AmfAusfRequest, nw_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ngcode::AmfAusfRequest, msg_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ngcode::AmfAusfRequest, mmei_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ngcode::AmfAusfRequest, num_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ngcode::AmfAusfReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ngcode::AmfAusfReply, message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ngcode::AmfAusfReply, autn_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ngcode::AmfAusfReply, rand_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ngcode::AmfAusfReply, xres_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ngcode::AmfAusfReply, k_asme_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ngcode::AmfAusfReply, default_apn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ngcode::AmfAusfReply, msg_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ngcode::AmfAusfReply, count_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ngcode::AmfSmfRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ngcode::AmfSmfRequest, guti_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ngcode::AmfSmfRequest, imsi_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ngcode::AmfSmfRequest, s11_cteid_amf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ngcode::AmfSmfRequest, eps_bearer_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ngcode::AmfSmfRequest, apn_in_use_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ngcode::AmfSmfRequest, tai_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ngcode::AmfSmfRequest, s1_uteid_dl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ngcode::AmfSmfRequest, g_trafmon_ip_addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ngcode::AmfSmfRequest, g_trafmon_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ngcode::AmfSmfRequest, msg_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ngcode::AmfSmfReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ngcode::AmfSmfReply, xres_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ngcode::AmfSmfReply, guti_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ngcode::AmfSmfReply, imsi_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ngcode::AmfSmfReply, apn_in_use_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ngcode::AmfSmfReply, tai_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ngcode::AmfSmfReply, k_enodeb_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ngcode::AmfSmfReply, k_nas_enc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ngcode::AmfSmfReply, k_nas_int_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ngcode::AmfSmfReply, tau_timer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ngcode::AmfSmfReply, s11_cteid_amf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ngcode::AmfSmfReply, s11_cteid_upf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ngcode::AmfSmfReply, s1_uteid_ul_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ngcode::AmfSmfReply, nw_capability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ngcode::AmfSmfReply, eps_bearer_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ngcode::AmfSmfReply, e_rab_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ngcode::AmfSmfReply, upf_smf_ip_addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ngcode::AmfSmfReply, upf_smf_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ngcode::AmfSmfReply, ue_ip_addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ngcode::AmfSmfReply, tai_list_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ngcode::AmfSmfReply, res_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ngcode::AmfSmfReply, g_upf_s1_ip_addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ngcode::AmfSmfReply, g_upf_s1_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ngcode::AmfSmfReply, s1_uteid_dl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ngcode::AmfSmfReply, g_trafmon_ip_addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ngcode::AmfSmfReply, g_trafmon_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ngcode::AmfSmfReply, msg_type_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ngcode::AmfAusfRequest)},
  { 14, -1, sizeof(::ngcode::AmfAusfReply)},
  { 27, -1, sizeof(::ngcode::AmfSmfRequest)},
  { 42, -1, sizeof(::ngcode::AmfSmfReply)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::ngcode::_AmfAusfRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ngcode::_AmfAusfReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ngcode::_AmfSmfRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ngcode::_AmfSmfReply_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "ngcode.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\014ngcode.proto\022\006ngcode\"\237\001\n\016AmfAusfReques"
      "t\022\014\n\004name\030\001 \001(\t\022\014\n\004type\030\002 \001(\t\022\014\n\004imsi\030\003 "
      "\001(\003\022\017\n\007plmn_id\030\004 \001(\003\022\024\n\014num_autn_vec\030\005 \001"
      "(\003\022\017\n\007nw_type\030\006 \001(\003\022\020\n\010msg_type\030\007 \001(\003\022\014\n"
      "\004mmei\030\010 \001(\003\022\013\n\003num\030\t \001(\005\"\227\001\n\014AmfAusfRepl"
      "y\022\017\n\007message\030\001 \001(\t\022\020\n\010autn_num\030\002 \001(\003\022\020\n\010"
      "rand_num\030\003 \001(\003\022\014\n\004xres\030\004 \001(\003\022\016\n\006k_asme\030\005"
      " \001(\003\022\023\n\013default_apn\030\006 \001(\003\022\020\n\010msg_type\030\007 "
      "\001(\003\022\r\n\005count\030\010 \001(\005\"\324\001\n\rAmfSmfRequest\022\014\n\004"
      "guti\030\001 \001(\003\022\014\n\004imsi\030\002 \001(\003\022\025\n\rs11_cteid_am"
      "f\030\003 \001(\003\022\025\n\reps_bearer_id\030\004 \001(\003\022\022\n\napn_in"
      "_use\030\005 \001(\003\022\013\n\003tai\030\006 \001(\003\022\023\n\013s1_uteid_dl\030\007"
      " \001(\005\022\031\n\021g_trafmon_ip_addr\030\010 \001(\t\022\026\n\016g_tra"
      "fmon_port\030\t \001(\003\022\020\n\010msg_type\030\n \001(\003\"\230\004\n\013Am"
      "fSmfReply\022\014\n\004xres\030\001 \001(\003\022\014\n\004guti\030\002 \001(\003\022\014\n"
      "\004imsi\030\003 \001(\003\022\022\n\napn_in_use\030\004 \001(\003\022\013\n\003tai\030\005"
      " \001(\003\022\020\n\010k_enodeb\030\006 \001(\003\022\021\n\tk_nas_enc\030\007 \001("
      "\003\022\021\n\tk_nas_int\030\010 \001(\003\022\021\n\ttau_timer\030\t \001(\003\022"
      "\025\n\rs11_cteid_amf\030\n \001(\005\022\025\n\rs11_cteid_upf\030"
      "\013 \001(\005\022\023\n\013s1_uteid_ul\030\014 \001(\005\022\025\n\rnw_capabil"
      "ity\030\r \001(\005\022\025\n\reps_bearer_id\030\016 \001(\005\022\020\n\010e_ra"
      "b_id\030\017 \001(\005\022\027\n\017upf_smf_ip_addr\030\020 \001(\t\022\024\n\014u"
      "pf_smf_port\030\021 \001(\003\022\022\n\nue_ip_addr\030\022 \001(\t\022\025\n"
      "\rtai_list_size\030\023 \001(\003\022\013\n\003res\030\024 \001(\010\022\030\n\020g_u"
      "pf_s1_ip_addr\030\025 \001(\t\022\025\n\rg_upf_s1_port\030\026 \001"
      "(\003\022\023\n\013s1_uteid_dl\030\027 \001(\005\022\031\n\021g_trafmon_ip_"
      "addr\030\030 \001(\t\022\026\n\016g_trafmon_port\030\031 \001(\003\022\020\n\010ms"
      "g_type\030\032 \001(\0032\222\001\n\007Greeter\022D\n\022AmfAusfInter"
      "action\022\026.ngcode.AmfAusfRequest\032\024.ngcode."
      "AmfAusfReply\"\000\022A\n\021AmfSmfInteraction\022\025.ng"
      "code.AmfSmfRequest\032\023.ngcode.AmfSmfReply\""
      "\000B.\n\027io.grpc.examples.ngcodeB\013NGcodeProt"
      "oP\001\242\002\003HLWb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1297);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ngcode.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_ngcode_2eproto
namespace ngcode {

// ===================================================================

void AmfAusfRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AmfAusfRequest::kNameFieldNumber;
const int AmfAusfRequest::kTypeFieldNumber;
const int AmfAusfRequest::kImsiFieldNumber;
const int AmfAusfRequest::kPlmnIdFieldNumber;
const int AmfAusfRequest::kNumAutnVecFieldNumber;
const int AmfAusfRequest::kNwTypeFieldNumber;
const int AmfAusfRequest::kMsgTypeFieldNumber;
const int AmfAusfRequest::kMmeiFieldNumber;
const int AmfAusfRequest::kNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AmfAusfRequest::AmfAusfRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ngcode_2eproto::InitDefaultsAmfAusfRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ngcode.AmfAusfRequest)
}
AmfAusfRequest::AmfAusfRequest(const AmfAusfRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.type().size() > 0) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  ::memcpy(&imsi_, &from.imsi_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_) -
    reinterpret_cast<char*>(&imsi_)) + sizeof(num_));
  // @@protoc_insertion_point(copy_constructor:ngcode.AmfAusfRequest)
}

void AmfAusfRequest::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&imsi_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_) -
      reinterpret_cast<char*>(&imsi_)) + sizeof(num_));
  _cached_size_ = 0;
}

AmfAusfRequest::~AmfAusfRequest() {
  // @@protoc_insertion_point(destructor:ngcode.AmfAusfRequest)
  SharedDtor();
}

void AmfAusfRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AmfAusfRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AmfAusfRequest::descriptor() {
  ::protobuf_ngcode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ngcode_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AmfAusfRequest& AmfAusfRequest::default_instance() {
  ::protobuf_ngcode_2eproto::InitDefaultsAmfAusfRequest();
  return *internal_default_instance();
}

AmfAusfRequest* AmfAusfRequest::New(::google::protobuf::Arena* arena) const {
  AmfAusfRequest* n = new AmfAusfRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AmfAusfRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ngcode.AmfAusfRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&imsi_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_) -
      reinterpret_cast<char*>(&imsi_)) + sizeof(num_));
  _internal_metadata_.Clear();
}

bool AmfAusfRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ngcode.AmfAusfRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ngcode.AmfAusfRequest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ngcode.AmfAusfRequest.type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 imsi = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &imsi_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 plmn_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &plmn_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 num_autn_vec = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_autn_vec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 nw_type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nw_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 msg_type = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &msg_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 mmei = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mmei_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ngcode.AmfAusfRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ngcode.AmfAusfRequest)
  return false;
#undef DO_
}

void AmfAusfRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ngcode.AmfAusfRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ngcode.AmfAusfRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string type = 2;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ngcode.AmfAusfRequest.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->type(), output);
  }

  // int64 imsi = 3;
  if (this->imsi() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->imsi(), output);
  }

  // int64 plmn_id = 4;
  if (this->plmn_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->plmn_id(), output);
  }

  // int64 num_autn_vec = 5;
  if (this->num_autn_vec() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->num_autn_vec(), output);
  }

  // int64 nw_type = 6;
  if (this->nw_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->nw_type(), output);
  }

  // int64 msg_type = 7;
  if (this->msg_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->msg_type(), output);
  }

  // int64 mmei = 8;
  if (this->mmei() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->mmei(), output);
  }

  // int32 num = 9;
  if (this->num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->num(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ngcode.AmfAusfRequest)
}

::google::protobuf::uint8* AmfAusfRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ngcode.AmfAusfRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ngcode.AmfAusfRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string type = 2;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ngcode.AmfAusfRequest.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // int64 imsi = 3;
  if (this->imsi() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->imsi(), target);
  }

  // int64 plmn_id = 4;
  if (this->plmn_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->plmn_id(), target);
  }

  // int64 num_autn_vec = 5;
  if (this->num_autn_vec() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->num_autn_vec(), target);
  }

  // int64 nw_type = 6;
  if (this->nw_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->nw_type(), target);
  }

  // int64 msg_type = 7;
  if (this->msg_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->msg_type(), target);
  }

  // int64 mmei = 8;
  if (this->mmei() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->mmei(), target);
  }

  // int32 num = 9;
  if (this->num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->num(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ngcode.AmfAusfRequest)
  return target;
}

size_t AmfAusfRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ngcode.AmfAusfRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string type = 2;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  // int64 imsi = 3;
  if (this->imsi() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->imsi());
  }

  // int64 plmn_id = 4;
  if (this->plmn_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->plmn_id());
  }

  // int64 num_autn_vec = 5;
  if (this->num_autn_vec() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->num_autn_vec());
  }

  // int64 nw_type = 6;
  if (this->nw_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->nw_type());
  }

  // int64 msg_type = 7;
  if (this->msg_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->msg_type());
  }

  // int64 mmei = 8;
  if (this->mmei() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->mmei());
  }

  // int32 num = 9;
  if (this->num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AmfAusfRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ngcode.AmfAusfRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AmfAusfRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AmfAusfRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ngcode.AmfAusfRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ngcode.AmfAusfRequest)
    MergeFrom(*source);
  }
}

void AmfAusfRequest::MergeFrom(const AmfAusfRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ngcode.AmfAusfRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.imsi() != 0) {
    set_imsi(from.imsi());
  }
  if (from.plmn_id() != 0) {
    set_plmn_id(from.plmn_id());
  }
  if (from.num_autn_vec() != 0) {
    set_num_autn_vec(from.num_autn_vec());
  }
  if (from.nw_type() != 0) {
    set_nw_type(from.nw_type());
  }
  if (from.msg_type() != 0) {
    set_msg_type(from.msg_type());
  }
  if (from.mmei() != 0) {
    set_mmei(from.mmei());
  }
  if (from.num() != 0) {
    set_num(from.num());
  }
}

void AmfAusfRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ngcode.AmfAusfRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AmfAusfRequest::CopyFrom(const AmfAusfRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ngcode.AmfAusfRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AmfAusfRequest::IsInitialized() const {
  return true;
}

void AmfAusfRequest::Swap(AmfAusfRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AmfAusfRequest::InternalSwap(AmfAusfRequest* other) {
  using std::swap;
  name_.Swap(&other->name_);
  type_.Swap(&other->type_);
  swap(imsi_, other->imsi_);
  swap(plmn_id_, other->plmn_id_);
  swap(num_autn_vec_, other->num_autn_vec_);
  swap(nw_type_, other->nw_type_);
  swap(msg_type_, other->msg_type_);
  swap(mmei_, other->mmei_);
  swap(num_, other->num_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AmfAusfRequest::GetMetadata() const {
  protobuf_ngcode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ngcode_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AmfAusfReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AmfAusfReply::kMessageFieldNumber;
const int AmfAusfReply::kAutnNumFieldNumber;
const int AmfAusfReply::kRandNumFieldNumber;
const int AmfAusfReply::kXresFieldNumber;
const int AmfAusfReply::kKAsmeFieldNumber;
const int AmfAusfReply::kDefaultApnFieldNumber;
const int AmfAusfReply::kMsgTypeFieldNumber;
const int AmfAusfReply::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AmfAusfReply::AmfAusfReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ngcode_2eproto::InitDefaultsAmfAusfReply();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ngcode.AmfAusfReply)
}
AmfAusfReply::AmfAusfReply(const AmfAusfReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.message().size() > 0) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  ::memcpy(&autn_num_, &from.autn_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&autn_num_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:ngcode.AmfAusfReply)
}

void AmfAusfReply::SharedCtor() {
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&autn_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&autn_num_)) + sizeof(count_));
  _cached_size_ = 0;
}

AmfAusfReply::~AmfAusfReply() {
  // @@protoc_insertion_point(destructor:ngcode.AmfAusfReply)
  SharedDtor();
}

void AmfAusfReply::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AmfAusfReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AmfAusfReply::descriptor() {
  ::protobuf_ngcode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ngcode_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AmfAusfReply& AmfAusfReply::default_instance() {
  ::protobuf_ngcode_2eproto::InitDefaultsAmfAusfReply();
  return *internal_default_instance();
}

AmfAusfReply* AmfAusfReply::New(::google::protobuf::Arena* arena) const {
  AmfAusfReply* n = new AmfAusfReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AmfAusfReply::Clear() {
// @@protoc_insertion_point(message_clear_start:ngcode.AmfAusfReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&autn_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&autn_num_)) + sizeof(count_));
  _internal_metadata_.Clear();
}

bool AmfAusfReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ngcode.AmfAusfReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string message = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ngcode.AmfAusfReply.message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 autn_num = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &autn_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 rand_num = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rand_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 xres = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &xres_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 k_asme = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &k_asme_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 default_apn = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &default_apn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 msg_type = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &msg_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 count = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ngcode.AmfAusfReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ngcode.AmfAusfReply)
  return false;
#undef DO_
}

void AmfAusfReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ngcode.AmfAusfReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ngcode.AmfAusfReply.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  // int64 autn_num = 2;
  if (this->autn_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->autn_num(), output);
  }

  // int64 rand_num = 3;
  if (this->rand_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->rand_num(), output);
  }

  // int64 xres = 4;
  if (this->xres() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->xres(), output);
  }

  // int64 k_asme = 5;
  if (this->k_asme() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->k_asme(), output);
  }

  // int64 default_apn = 6;
  if (this->default_apn() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->default_apn(), output);
  }

  // int64 msg_type = 7;
  if (this->msg_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->msg_type(), output);
  }

  // int32 count = 8;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->count(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ngcode.AmfAusfReply)
}

::google::protobuf::uint8* AmfAusfReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ngcode.AmfAusfReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ngcode.AmfAusfReply.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  // int64 autn_num = 2;
  if (this->autn_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->autn_num(), target);
  }

  // int64 rand_num = 3;
  if (this->rand_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->rand_num(), target);
  }

  // int64 xres = 4;
  if (this->xres() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->xres(), target);
  }

  // int64 k_asme = 5;
  if (this->k_asme() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->k_asme(), target);
  }

  // int64 default_apn = 6;
  if (this->default_apn() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->default_apn(), target);
  }

  // int64 msg_type = 7;
  if (this->msg_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->msg_type(), target);
  }

  // int32 count = 8;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->count(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ngcode.AmfAusfReply)
  return target;
}

size_t AmfAusfReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ngcode.AmfAusfReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string message = 1;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  // int64 autn_num = 2;
  if (this->autn_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->autn_num());
  }

  // int64 rand_num = 3;
  if (this->rand_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->rand_num());
  }

  // int64 xres = 4;
  if (this->xres() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->xres());
  }

  // int64 k_asme = 5;
  if (this->k_asme() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->k_asme());
  }

  // int64 default_apn = 6;
  if (this->default_apn() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->default_apn());
  }

  // int64 msg_type = 7;
  if (this->msg_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->msg_type());
  }

  // int32 count = 8;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AmfAusfReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ngcode.AmfAusfReply)
  GOOGLE_DCHECK_NE(&from, this);
  const AmfAusfReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AmfAusfReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ngcode.AmfAusfReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ngcode.AmfAusfReply)
    MergeFrom(*source);
  }
}

void AmfAusfReply::MergeFrom(const AmfAusfReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ngcode.AmfAusfReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.autn_num() != 0) {
    set_autn_num(from.autn_num());
  }
  if (from.rand_num() != 0) {
    set_rand_num(from.rand_num());
  }
  if (from.xres() != 0) {
    set_xres(from.xres());
  }
  if (from.k_asme() != 0) {
    set_k_asme(from.k_asme());
  }
  if (from.default_apn() != 0) {
    set_default_apn(from.default_apn());
  }
  if (from.msg_type() != 0) {
    set_msg_type(from.msg_type());
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
}

void AmfAusfReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ngcode.AmfAusfReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AmfAusfReply::CopyFrom(const AmfAusfReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ngcode.AmfAusfReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AmfAusfReply::IsInitialized() const {
  return true;
}

void AmfAusfReply::Swap(AmfAusfReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AmfAusfReply::InternalSwap(AmfAusfReply* other) {
  using std::swap;
  message_.Swap(&other->message_);
  swap(autn_num_, other->autn_num_);
  swap(rand_num_, other->rand_num_);
  swap(xres_, other->xres_);
  swap(k_asme_, other->k_asme_);
  swap(default_apn_, other->default_apn_);
  swap(msg_type_, other->msg_type_);
  swap(count_, other->count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AmfAusfReply::GetMetadata() const {
  protobuf_ngcode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ngcode_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AmfSmfRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AmfSmfRequest::kGutiFieldNumber;
const int AmfSmfRequest::kImsiFieldNumber;
const int AmfSmfRequest::kS11CteidAmfFieldNumber;
const int AmfSmfRequest::kEpsBearerIdFieldNumber;
const int AmfSmfRequest::kApnInUseFieldNumber;
const int AmfSmfRequest::kTaiFieldNumber;
const int AmfSmfRequest::kS1UteidDlFieldNumber;
const int AmfSmfRequest::kGTrafmonIpAddrFieldNumber;
const int AmfSmfRequest::kGTrafmonPortFieldNumber;
const int AmfSmfRequest::kMsgTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AmfSmfRequest::AmfSmfRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ngcode_2eproto::InitDefaultsAmfSmfRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ngcode.AmfSmfRequest)
}
AmfSmfRequest::AmfSmfRequest(const AmfSmfRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  g_trafmon_ip_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.g_trafmon_ip_addr().size() > 0) {
    g_trafmon_ip_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.g_trafmon_ip_addr_);
  }
  ::memcpy(&guti_, &from.guti_,
    static_cast<size_t>(reinterpret_cast<char*>(&s1_uteid_dl_) -
    reinterpret_cast<char*>(&guti_)) + sizeof(s1_uteid_dl_));
  // @@protoc_insertion_point(copy_constructor:ngcode.AmfSmfRequest)
}

void AmfSmfRequest::SharedCtor() {
  g_trafmon_ip_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&guti_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&s1_uteid_dl_) -
      reinterpret_cast<char*>(&guti_)) + sizeof(s1_uteid_dl_));
  _cached_size_ = 0;
}

AmfSmfRequest::~AmfSmfRequest() {
  // @@protoc_insertion_point(destructor:ngcode.AmfSmfRequest)
  SharedDtor();
}

void AmfSmfRequest::SharedDtor() {
  g_trafmon_ip_addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AmfSmfRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AmfSmfRequest::descriptor() {
  ::protobuf_ngcode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ngcode_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AmfSmfRequest& AmfSmfRequest::default_instance() {
  ::protobuf_ngcode_2eproto::InitDefaultsAmfSmfRequest();
  return *internal_default_instance();
}

AmfSmfRequest* AmfSmfRequest::New(::google::protobuf::Arena* arena) const {
  AmfSmfRequest* n = new AmfSmfRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AmfSmfRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ngcode.AmfSmfRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  g_trafmon_ip_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&guti_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&s1_uteid_dl_) -
      reinterpret_cast<char*>(&guti_)) + sizeof(s1_uteid_dl_));
  _internal_metadata_.Clear();
}

bool AmfSmfRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ngcode.AmfSmfRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 guti = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guti_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 imsi = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &imsi_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 s11_cteid_amf = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &s11_cteid_amf_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 eps_bearer_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &eps_bearer_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 apn_in_use = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &apn_in_use_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 tai = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tai_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 s1_uteid_dl = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &s1_uteid_dl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string g_trafmon_ip_addr = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_g_trafmon_ip_addr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->g_trafmon_ip_addr().data(), static_cast<int>(this->g_trafmon_ip_addr().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ngcode.AmfSmfRequest.g_trafmon_ip_addr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 g_trafmon_port = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &g_trafmon_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 msg_type = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &msg_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ngcode.AmfSmfRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ngcode.AmfSmfRequest)
  return false;
#undef DO_
}

void AmfSmfRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ngcode.AmfSmfRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 guti = 1;
  if (this->guti() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->guti(), output);
  }

  // int64 imsi = 2;
  if (this->imsi() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->imsi(), output);
  }

  // int64 s11_cteid_amf = 3;
  if (this->s11_cteid_amf() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->s11_cteid_amf(), output);
  }

  // int64 eps_bearer_id = 4;
  if (this->eps_bearer_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->eps_bearer_id(), output);
  }

  // int64 apn_in_use = 5;
  if (this->apn_in_use() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->apn_in_use(), output);
  }

  // int64 tai = 6;
  if (this->tai() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->tai(), output);
  }

  // int32 s1_uteid_dl = 7;
  if (this->s1_uteid_dl() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->s1_uteid_dl(), output);
  }

  // string g_trafmon_ip_addr = 8;
  if (this->g_trafmon_ip_addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->g_trafmon_ip_addr().data(), static_cast<int>(this->g_trafmon_ip_addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ngcode.AmfSmfRequest.g_trafmon_ip_addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->g_trafmon_ip_addr(), output);
  }

  // int64 g_trafmon_port = 9;
  if (this->g_trafmon_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->g_trafmon_port(), output);
  }

  // int64 msg_type = 10;
  if (this->msg_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->msg_type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ngcode.AmfSmfRequest)
}

::google::protobuf::uint8* AmfSmfRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ngcode.AmfSmfRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 guti = 1;
  if (this->guti() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->guti(), target);
  }

  // int64 imsi = 2;
  if (this->imsi() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->imsi(), target);
  }

  // int64 s11_cteid_amf = 3;
  if (this->s11_cteid_amf() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->s11_cteid_amf(), target);
  }

  // int64 eps_bearer_id = 4;
  if (this->eps_bearer_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->eps_bearer_id(), target);
  }

  // int64 apn_in_use = 5;
  if (this->apn_in_use() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->apn_in_use(), target);
  }

  // int64 tai = 6;
  if (this->tai() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->tai(), target);
  }

  // int32 s1_uteid_dl = 7;
  if (this->s1_uteid_dl() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->s1_uteid_dl(), target);
  }

  // string g_trafmon_ip_addr = 8;
  if (this->g_trafmon_ip_addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->g_trafmon_ip_addr().data(), static_cast<int>(this->g_trafmon_ip_addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ngcode.AmfSmfRequest.g_trafmon_ip_addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->g_trafmon_ip_addr(), target);
  }

  // int64 g_trafmon_port = 9;
  if (this->g_trafmon_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->g_trafmon_port(), target);
  }

  // int64 msg_type = 10;
  if (this->msg_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->msg_type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ngcode.AmfSmfRequest)
  return target;
}

size_t AmfSmfRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ngcode.AmfSmfRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string g_trafmon_ip_addr = 8;
  if (this->g_trafmon_ip_addr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->g_trafmon_ip_addr());
  }

  // int64 guti = 1;
  if (this->guti() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->guti());
  }

  // int64 imsi = 2;
  if (this->imsi() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->imsi());
  }

  // int64 s11_cteid_amf = 3;
  if (this->s11_cteid_amf() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->s11_cteid_amf());
  }

  // int64 eps_bearer_id = 4;
  if (this->eps_bearer_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->eps_bearer_id());
  }

  // int64 apn_in_use = 5;
  if (this->apn_in_use() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->apn_in_use());
  }

  // int64 tai = 6;
  if (this->tai() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->tai());
  }

  // int64 g_trafmon_port = 9;
  if (this->g_trafmon_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->g_trafmon_port());
  }

  // int64 msg_type = 10;
  if (this->msg_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->msg_type());
  }

  // int32 s1_uteid_dl = 7;
  if (this->s1_uteid_dl() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->s1_uteid_dl());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AmfSmfRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ngcode.AmfSmfRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AmfSmfRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AmfSmfRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ngcode.AmfSmfRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ngcode.AmfSmfRequest)
    MergeFrom(*source);
  }
}

void AmfSmfRequest::MergeFrom(const AmfSmfRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ngcode.AmfSmfRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.g_trafmon_ip_addr().size() > 0) {

    g_trafmon_ip_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.g_trafmon_ip_addr_);
  }
  if (from.guti() != 0) {
    set_guti(from.guti());
  }
  if (from.imsi() != 0) {
    set_imsi(from.imsi());
  }
  if (from.s11_cteid_amf() != 0) {
    set_s11_cteid_amf(from.s11_cteid_amf());
  }
  if (from.eps_bearer_id() != 0) {
    set_eps_bearer_id(from.eps_bearer_id());
  }
  if (from.apn_in_use() != 0) {
    set_apn_in_use(from.apn_in_use());
  }
  if (from.tai() != 0) {
    set_tai(from.tai());
  }
  if (from.g_trafmon_port() != 0) {
    set_g_trafmon_port(from.g_trafmon_port());
  }
  if (from.msg_type() != 0) {
    set_msg_type(from.msg_type());
  }
  if (from.s1_uteid_dl() != 0) {
    set_s1_uteid_dl(from.s1_uteid_dl());
  }
}

void AmfSmfRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ngcode.AmfSmfRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AmfSmfRequest::CopyFrom(const AmfSmfRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ngcode.AmfSmfRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AmfSmfRequest::IsInitialized() const {
  return true;
}

void AmfSmfRequest::Swap(AmfSmfRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AmfSmfRequest::InternalSwap(AmfSmfRequest* other) {
  using std::swap;
  g_trafmon_ip_addr_.Swap(&other->g_trafmon_ip_addr_);
  swap(guti_, other->guti_);
  swap(imsi_, other->imsi_);
  swap(s11_cteid_amf_, other->s11_cteid_amf_);
  swap(eps_bearer_id_, other->eps_bearer_id_);
  swap(apn_in_use_, other->apn_in_use_);
  swap(tai_, other->tai_);
  swap(g_trafmon_port_, other->g_trafmon_port_);
  swap(msg_type_, other->msg_type_);
  swap(s1_uteid_dl_, other->s1_uteid_dl_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AmfSmfRequest::GetMetadata() const {
  protobuf_ngcode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ngcode_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AmfSmfReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AmfSmfReply::kXresFieldNumber;
const int AmfSmfReply::kGutiFieldNumber;
const int AmfSmfReply::kImsiFieldNumber;
const int AmfSmfReply::kApnInUseFieldNumber;
const int AmfSmfReply::kTaiFieldNumber;
const int AmfSmfReply::kKEnodebFieldNumber;
const int AmfSmfReply::kKNasEncFieldNumber;
const int AmfSmfReply::kKNasIntFieldNumber;
const int AmfSmfReply::kTauTimerFieldNumber;
const int AmfSmfReply::kS11CteidAmfFieldNumber;
const int AmfSmfReply::kS11CteidUpfFieldNumber;
const int AmfSmfReply::kS1UteidUlFieldNumber;
const int AmfSmfReply::kNwCapabilityFieldNumber;
const int AmfSmfReply::kEpsBearerIdFieldNumber;
const int AmfSmfReply::kERabIdFieldNumber;
const int AmfSmfReply::kUpfSmfIpAddrFieldNumber;
const int AmfSmfReply::kUpfSmfPortFieldNumber;
const int AmfSmfReply::kUeIpAddrFieldNumber;
const int AmfSmfReply::kTaiListSizeFieldNumber;
const int AmfSmfReply::kResFieldNumber;
const int AmfSmfReply::kGUpfS1IpAddrFieldNumber;
const int AmfSmfReply::kGUpfS1PortFieldNumber;
const int AmfSmfReply::kS1UteidDlFieldNumber;
const int AmfSmfReply::kGTrafmonIpAddrFieldNumber;
const int AmfSmfReply::kGTrafmonPortFieldNumber;
const int AmfSmfReply::kMsgTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AmfSmfReply::AmfSmfReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ngcode_2eproto::InitDefaultsAmfSmfReply();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ngcode.AmfSmfReply)
}
AmfSmfReply::AmfSmfReply(const AmfSmfReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  upf_smf_ip_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.upf_smf_ip_addr().size() > 0) {
    upf_smf_ip_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.upf_smf_ip_addr_);
  }
  ue_ip_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ue_ip_addr().size() > 0) {
    ue_ip_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ue_ip_addr_);
  }
  g_upf_s1_ip_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.g_upf_s1_ip_addr().size() > 0) {
    g_upf_s1_ip_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.g_upf_s1_ip_addr_);
  }
  g_trafmon_ip_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.g_trafmon_ip_addr().size() > 0) {
    g_trafmon_ip_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.g_trafmon_ip_addr_);
  }
  ::memcpy(&xres_, &from.xres_,
    static_cast<size_t>(reinterpret_cast<char*>(&msg_type_) -
    reinterpret_cast<char*>(&xres_)) + sizeof(msg_type_));
  // @@protoc_insertion_point(copy_constructor:ngcode.AmfSmfReply)
}

void AmfSmfReply::SharedCtor() {
  upf_smf_ip_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ue_ip_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  g_upf_s1_ip_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  g_trafmon_ip_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&xres_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_type_) -
      reinterpret_cast<char*>(&xres_)) + sizeof(msg_type_));
  _cached_size_ = 0;
}

AmfSmfReply::~AmfSmfReply() {
  // @@protoc_insertion_point(destructor:ngcode.AmfSmfReply)
  SharedDtor();
}

void AmfSmfReply::SharedDtor() {
  upf_smf_ip_addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ue_ip_addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  g_upf_s1_ip_addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  g_trafmon_ip_addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AmfSmfReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AmfSmfReply::descriptor() {
  ::protobuf_ngcode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ngcode_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AmfSmfReply& AmfSmfReply::default_instance() {
  ::protobuf_ngcode_2eproto::InitDefaultsAmfSmfReply();
  return *internal_default_instance();
}

AmfSmfReply* AmfSmfReply::New(::google::protobuf::Arena* arena) const {
  AmfSmfReply* n = new AmfSmfReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AmfSmfReply::Clear() {
// @@protoc_insertion_point(message_clear_start:ngcode.AmfSmfReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  upf_smf_ip_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ue_ip_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  g_upf_s1_ip_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  g_trafmon_ip_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&xres_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_type_) -
      reinterpret_cast<char*>(&xres_)) + sizeof(msg_type_));
  _internal_metadata_.Clear();
}

bool AmfSmfReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ngcode.AmfSmfReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 xres = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &xres_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 guti = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guti_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 imsi = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &imsi_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 apn_in_use = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &apn_in_use_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 tai = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tai_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 k_enodeb = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &k_enodeb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 k_nas_enc = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &k_nas_enc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 k_nas_int = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &k_nas_int_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 tau_timer = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tau_timer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 s11_cteid_amf = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &s11_cteid_amf_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 s11_cteid_upf = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &s11_cteid_upf_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 s1_uteid_ul = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &s1_uteid_ul_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nw_capability = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nw_capability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 eps_bearer_id = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eps_bearer_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 e_rab_id = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &e_rab_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string upf_smf_ip_addr = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_upf_smf_ip_addr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->upf_smf_ip_addr().data(), static_cast<int>(this->upf_smf_ip_addr().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ngcode.AmfSmfReply.upf_smf_ip_addr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 upf_smf_port = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &upf_smf_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ue_ip_addr = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ue_ip_addr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ue_ip_addr().data(), static_cast<int>(this->ue_ip_addr().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ngcode.AmfSmfReply.ue_ip_addr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 tai_list_size = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tai_list_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool res = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &res_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string g_upf_s1_ip_addr = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_g_upf_s1_ip_addr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->g_upf_s1_ip_addr().data(), static_cast<int>(this->g_upf_s1_ip_addr().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ngcode.AmfSmfReply.g_upf_s1_ip_addr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 g_upf_s1_port = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &g_upf_s1_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 s1_uteid_dl = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &s1_uteid_dl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string g_trafmon_ip_addr = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 194 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_g_trafmon_ip_addr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->g_trafmon_ip_addr().data(), static_cast<int>(this->g_trafmon_ip_addr().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ngcode.AmfSmfReply.g_trafmon_ip_addr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 g_trafmon_port = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &g_trafmon_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 msg_type = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 208 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &msg_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ngcode.AmfSmfReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ngcode.AmfSmfReply)
  return false;
#undef DO_
}

void AmfSmfReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ngcode.AmfSmfReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 xres = 1;
  if (this->xres() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->xres(), output);
  }

  // int64 guti = 2;
  if (this->guti() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->guti(), output);
  }

  // int64 imsi = 3;
  if (this->imsi() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->imsi(), output);
  }

  // int64 apn_in_use = 4;
  if (this->apn_in_use() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->apn_in_use(), output);
  }

  // int64 tai = 5;
  if (this->tai() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->tai(), output);
  }

  // int64 k_enodeb = 6;
  if (this->k_enodeb() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->k_enodeb(), output);
  }

  // int64 k_nas_enc = 7;
  if (this->k_nas_enc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->k_nas_enc(), output);
  }

  // int64 k_nas_int = 8;
  if (this->k_nas_int() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->k_nas_int(), output);
  }

  // int64 tau_timer = 9;
  if (this->tau_timer() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->tau_timer(), output);
  }

  // int32 s11_cteid_amf = 10;
  if (this->s11_cteid_amf() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->s11_cteid_amf(), output);
  }

  // int32 s11_cteid_upf = 11;
  if (this->s11_cteid_upf() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->s11_cteid_upf(), output);
  }

  // int32 s1_uteid_ul = 12;
  if (this->s1_uteid_ul() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->s1_uteid_ul(), output);
  }

  // int32 nw_capability = 13;
  if (this->nw_capability() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->nw_capability(), output);
  }

  // int32 eps_bearer_id = 14;
  if (this->eps_bearer_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->eps_bearer_id(), output);
  }

  // int32 e_rab_id = 15;
  if (this->e_rab_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->e_rab_id(), output);
  }

  // string upf_smf_ip_addr = 16;
  if (this->upf_smf_ip_addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->upf_smf_ip_addr().data(), static_cast<int>(this->upf_smf_ip_addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ngcode.AmfSmfReply.upf_smf_ip_addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->upf_smf_ip_addr(), output);
  }

  // int64 upf_smf_port = 17;
  if (this->upf_smf_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->upf_smf_port(), output);
  }

  // string ue_ip_addr = 18;
  if (this->ue_ip_addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ue_ip_addr().data(), static_cast<int>(this->ue_ip_addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ngcode.AmfSmfReply.ue_ip_addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->ue_ip_addr(), output);
  }

  // int64 tai_list_size = 19;
  if (this->tai_list_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(19, this->tai_list_size(), output);
  }

  // bool res = 20;
  if (this->res() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->res(), output);
  }

  // string g_upf_s1_ip_addr = 21;
  if (this->g_upf_s1_ip_addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->g_upf_s1_ip_addr().data(), static_cast<int>(this->g_upf_s1_ip_addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ngcode.AmfSmfReply.g_upf_s1_ip_addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->g_upf_s1_ip_addr(), output);
  }

  // int64 g_upf_s1_port = 22;
  if (this->g_upf_s1_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(22, this->g_upf_s1_port(), output);
  }

  // int32 s1_uteid_dl = 23;
  if (this->s1_uteid_dl() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->s1_uteid_dl(), output);
  }

  // string g_trafmon_ip_addr = 24;
  if (this->g_trafmon_ip_addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->g_trafmon_ip_addr().data(), static_cast<int>(this->g_trafmon_ip_addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ngcode.AmfSmfReply.g_trafmon_ip_addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      24, this->g_trafmon_ip_addr(), output);
  }

  // int64 g_trafmon_port = 25;
  if (this->g_trafmon_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(25, this->g_trafmon_port(), output);
  }

  // int64 msg_type = 26;
  if (this->msg_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(26, this->msg_type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ngcode.AmfSmfReply)
}

::google::protobuf::uint8* AmfSmfReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ngcode.AmfSmfReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 xres = 1;
  if (this->xres() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->xres(), target);
  }

  // int64 guti = 2;
  if (this->guti() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->guti(), target);
  }

  // int64 imsi = 3;
  if (this->imsi() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->imsi(), target);
  }

  // int64 apn_in_use = 4;
  if (this->apn_in_use() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->apn_in_use(), target);
  }

  // int64 tai = 5;
  if (this->tai() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->tai(), target);
  }

  // int64 k_enodeb = 6;
  if (this->k_enodeb() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->k_enodeb(), target);
  }

  // int64 k_nas_enc = 7;
  if (this->k_nas_enc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->k_nas_enc(), target);
  }

  // int64 k_nas_int = 8;
  if (this->k_nas_int() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->k_nas_int(), target);
  }

  // int64 tau_timer = 9;
  if (this->tau_timer() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->tau_timer(), target);
  }

  // int32 s11_cteid_amf = 10;
  if (this->s11_cteid_amf() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->s11_cteid_amf(), target);
  }

  // int32 s11_cteid_upf = 11;
  if (this->s11_cteid_upf() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->s11_cteid_upf(), target);
  }

  // int32 s1_uteid_ul = 12;
  if (this->s1_uteid_ul() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->s1_uteid_ul(), target);
  }

  // int32 nw_capability = 13;
  if (this->nw_capability() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->nw_capability(), target);
  }

  // int32 eps_bearer_id = 14;
  if (this->eps_bearer_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->eps_bearer_id(), target);
  }

  // int32 e_rab_id = 15;
  if (this->e_rab_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->e_rab_id(), target);
  }

  // string upf_smf_ip_addr = 16;
  if (this->upf_smf_ip_addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->upf_smf_ip_addr().data(), static_cast<int>(this->upf_smf_ip_addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ngcode.AmfSmfReply.upf_smf_ip_addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->upf_smf_ip_addr(), target);
  }

  // int64 upf_smf_port = 17;
  if (this->upf_smf_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->upf_smf_port(), target);
  }

  // string ue_ip_addr = 18;
  if (this->ue_ip_addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ue_ip_addr().data(), static_cast<int>(this->ue_ip_addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ngcode.AmfSmfReply.ue_ip_addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->ue_ip_addr(), target);
  }

  // int64 tai_list_size = 19;
  if (this->tai_list_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(19, this->tai_list_size(), target);
  }

  // bool res = 20;
  if (this->res() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->res(), target);
  }

  // string g_upf_s1_ip_addr = 21;
  if (this->g_upf_s1_ip_addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->g_upf_s1_ip_addr().data(), static_cast<int>(this->g_upf_s1_ip_addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ngcode.AmfSmfReply.g_upf_s1_ip_addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->g_upf_s1_ip_addr(), target);
  }

  // int64 g_upf_s1_port = 22;
  if (this->g_upf_s1_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(22, this->g_upf_s1_port(), target);
  }

  // int32 s1_uteid_dl = 23;
  if (this->s1_uteid_dl() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->s1_uteid_dl(), target);
  }

  // string g_trafmon_ip_addr = 24;
  if (this->g_trafmon_ip_addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->g_trafmon_ip_addr().data(), static_cast<int>(this->g_trafmon_ip_addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ngcode.AmfSmfReply.g_trafmon_ip_addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->g_trafmon_ip_addr(), target);
  }

  // int64 g_trafmon_port = 25;
  if (this->g_trafmon_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(25, this->g_trafmon_port(), target);
  }

  // int64 msg_type = 26;
  if (this->msg_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(26, this->msg_type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ngcode.AmfSmfReply)
  return target;
}

size_t AmfSmfReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ngcode.AmfSmfReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string upf_smf_ip_addr = 16;
  if (this->upf_smf_ip_addr().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->upf_smf_ip_addr());
  }

  // string ue_ip_addr = 18;
  if (this->ue_ip_addr().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ue_ip_addr());
  }

  // string g_upf_s1_ip_addr = 21;
  if (this->g_upf_s1_ip_addr().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->g_upf_s1_ip_addr());
  }

  // string g_trafmon_ip_addr = 24;
  if (this->g_trafmon_ip_addr().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->g_trafmon_ip_addr());
  }

  // int64 xres = 1;
  if (this->xres() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->xres());
  }

  // int64 guti = 2;
  if (this->guti() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->guti());
  }

  // int64 imsi = 3;
  if (this->imsi() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->imsi());
  }

  // int64 apn_in_use = 4;
  if (this->apn_in_use() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->apn_in_use());
  }

  // int64 tai = 5;
  if (this->tai() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->tai());
  }

  // int64 k_enodeb = 6;
  if (this->k_enodeb() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->k_enodeb());
  }

  // int64 k_nas_enc = 7;
  if (this->k_nas_enc() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->k_nas_enc());
  }

  // int64 k_nas_int = 8;
  if (this->k_nas_int() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->k_nas_int());
  }

  // int64 tau_timer = 9;
  if (this->tau_timer() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->tau_timer());
  }

  // int32 s11_cteid_amf = 10;
  if (this->s11_cteid_amf() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->s11_cteid_amf());
  }

  // int32 s11_cteid_upf = 11;
  if (this->s11_cteid_upf() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->s11_cteid_upf());
  }

  // int32 s1_uteid_ul = 12;
  if (this->s1_uteid_ul() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->s1_uteid_ul());
  }

  // int32 nw_capability = 13;
  if (this->nw_capability() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nw_capability());
  }

  // int32 eps_bearer_id = 14;
  if (this->eps_bearer_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->eps_bearer_id());
  }

  // int32 e_rab_id = 15;
  if (this->e_rab_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->e_rab_id());
  }

  // int64 upf_smf_port = 17;
  if (this->upf_smf_port() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->upf_smf_port());
  }

  // int64 tai_list_size = 19;
  if (this->tai_list_size() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->tai_list_size());
  }

  // bool res = 20;
  if (this->res() != 0) {
    total_size += 2 + 1;
  }

  // int32 s1_uteid_dl = 23;
  if (this->s1_uteid_dl() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->s1_uteid_dl());
  }

  // int64 g_upf_s1_port = 22;
  if (this->g_upf_s1_port() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->g_upf_s1_port());
  }

  // int64 g_trafmon_port = 25;
  if (this->g_trafmon_port() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->g_trafmon_port());
  }

  // int64 msg_type = 26;
  if (this->msg_type() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->msg_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AmfSmfReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ngcode.AmfSmfReply)
  GOOGLE_DCHECK_NE(&from, this);
  const AmfSmfReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AmfSmfReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ngcode.AmfSmfReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ngcode.AmfSmfReply)
    MergeFrom(*source);
  }
}

void AmfSmfReply::MergeFrom(const AmfSmfReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ngcode.AmfSmfReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.upf_smf_ip_addr().size() > 0) {

    upf_smf_ip_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.upf_smf_ip_addr_);
  }
  if (from.ue_ip_addr().size() > 0) {

    ue_ip_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ue_ip_addr_);
  }
  if (from.g_upf_s1_ip_addr().size() > 0) {

    g_upf_s1_ip_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.g_upf_s1_ip_addr_);
  }
  if (from.g_trafmon_ip_addr().size() > 0) {

    g_trafmon_ip_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.g_trafmon_ip_addr_);
  }
  if (from.xres() != 0) {
    set_xres(from.xres());
  }
  if (from.guti() != 0) {
    set_guti(from.guti());
  }
  if (from.imsi() != 0) {
    set_imsi(from.imsi());
  }
  if (from.apn_in_use() != 0) {
    set_apn_in_use(from.apn_in_use());
  }
  if (from.tai() != 0) {
    set_tai(from.tai());
  }
  if (from.k_enodeb() != 0) {
    set_k_enodeb(from.k_enodeb());
  }
  if (from.k_nas_enc() != 0) {
    set_k_nas_enc(from.k_nas_enc());
  }
  if (from.k_nas_int() != 0) {
    set_k_nas_int(from.k_nas_int());
  }
  if (from.tau_timer() != 0) {
    set_tau_timer(from.tau_timer());
  }
  if (from.s11_cteid_amf() != 0) {
    set_s11_cteid_amf(from.s11_cteid_amf());
  }
  if (from.s11_cteid_upf() != 0) {
    set_s11_cteid_upf(from.s11_cteid_upf());
  }
  if (from.s1_uteid_ul() != 0) {
    set_s1_uteid_ul(from.s1_uteid_ul());
  }
  if (from.nw_capability() != 0) {
    set_nw_capability(from.nw_capability());
  }
  if (from.eps_bearer_id() != 0) {
    set_eps_bearer_id(from.eps_bearer_id());
  }
  if (from.e_rab_id() != 0) {
    set_e_rab_id(from.e_rab_id());
  }
  if (from.upf_smf_port() != 0) {
    set_upf_smf_port(from.upf_smf_port());
  }
  if (from.tai_list_size() != 0) {
    set_tai_list_size(from.tai_list_size());
  }
  if (from.res() != 0) {
    set_res(from.res());
  }
  if (from.s1_uteid_dl() != 0) {
    set_s1_uteid_dl(from.s1_uteid_dl());
  }
  if (from.g_upf_s1_port() != 0) {
    set_g_upf_s1_port(from.g_upf_s1_port());
  }
  if (from.g_trafmon_port() != 0) {
    set_g_trafmon_port(from.g_trafmon_port());
  }
  if (from.msg_type() != 0) {
    set_msg_type(from.msg_type());
  }
}

void AmfSmfReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ngcode.AmfSmfReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AmfSmfReply::CopyFrom(const AmfSmfReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ngcode.AmfSmfReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AmfSmfReply::IsInitialized() const {
  return true;
}

void AmfSmfReply::Swap(AmfSmfReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AmfSmfReply::InternalSwap(AmfSmfReply* other) {
  using std::swap;
  upf_smf_ip_addr_.Swap(&other->upf_smf_ip_addr_);
  ue_ip_addr_.Swap(&other->ue_ip_addr_);
  g_upf_s1_ip_addr_.Swap(&other->g_upf_s1_ip_addr_);
  g_trafmon_ip_addr_.Swap(&other->g_trafmon_ip_addr_);
  swap(xres_, other->xres_);
  swap(guti_, other->guti_);
  swap(imsi_, other->imsi_);
  swap(apn_in_use_, other->apn_in_use_);
  swap(tai_, other->tai_);
  swap(k_enodeb_, other->k_enodeb_);
  swap(k_nas_enc_, other->k_nas_enc_);
  swap(k_nas_int_, other->k_nas_int_);
  swap(tau_timer_, other->tau_timer_);
  swap(s11_cteid_amf_, other->s11_cteid_amf_);
  swap(s11_cteid_upf_, other->s11_cteid_upf_);
  swap(s1_uteid_ul_, other->s1_uteid_ul_);
  swap(nw_capability_, other->nw_capability_);
  swap(eps_bearer_id_, other->eps_bearer_id_);
  swap(e_rab_id_, other->e_rab_id_);
  swap(upf_smf_port_, other->upf_smf_port_);
  swap(tai_list_size_, other->tai_list_size_);
  swap(res_, other->res_);
  swap(s1_uteid_dl_, other->s1_uteid_dl_);
  swap(g_upf_s1_port_, other->g_upf_s1_port_);
  swap(g_trafmon_port_, other->g_trafmon_port_);
  swap(msg_type_, other->msg_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AmfSmfReply::GetMetadata() const {
  protobuf_ngcode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ngcode_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ngcode

// @@protoc_insertion_point(global_scope)
