// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ngcode.proto

#include "ngcode.pb.h"
#include "ngcode.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace ngcode {

static const char* Greeter_method_names[] = {
  "/ngcode.Greeter/AmfAusfInteraction",
  "/ngcode.Greeter/AmfSmfInteraction",
};

std::unique_ptr< Greeter::Stub> Greeter::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Greeter::Stub> stub(new Greeter::Stub(channel));
  return stub;
}

Greeter::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_AmfAusfInteraction_(Greeter_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AmfSmfInteraction_(Greeter_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Greeter::Stub::AmfAusfInteraction(::grpc::ClientContext* context, const ::ngcode::AmfAusfRequest& request, ::ngcode::AmfAusfReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AmfAusfInteraction_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::ngcode::AmfAusfReply>* Greeter::Stub::AsyncAmfAusfInteractionRaw(::grpc::ClientContext* context, const ::ngcode::AmfAusfRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ngcode::AmfAusfReply>::Create(channel_.get(), cq, rpcmethod_AmfAusfInteraction_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ngcode::AmfAusfReply>* Greeter::Stub::PrepareAsyncAmfAusfInteractionRaw(::grpc::ClientContext* context, const ::ngcode::AmfAusfRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ngcode::AmfAusfReply>::Create(channel_.get(), cq, rpcmethod_AmfAusfInteraction_, context, request, false);
}

::grpc::Status Greeter::Stub::AmfSmfInteraction(::grpc::ClientContext* context, const ::ngcode::AmfSmfRequest& request, ::ngcode::AmfSmfReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AmfSmfInteraction_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::ngcode::AmfSmfReply>* Greeter::Stub::AsyncAmfSmfInteractionRaw(::grpc::ClientContext* context, const ::ngcode::AmfSmfRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ngcode::AmfSmfReply>::Create(channel_.get(), cq, rpcmethod_AmfSmfInteraction_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ngcode::AmfSmfReply>* Greeter::Stub::PrepareAsyncAmfSmfInteractionRaw(::grpc::ClientContext* context, const ::ngcode::AmfSmfRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ngcode::AmfSmfReply>::Create(channel_.get(), cq, rpcmethod_AmfSmfInteraction_, context, request, false);
}

Greeter::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::ngcode::AmfAusfRequest, ::ngcode::AmfAusfReply>(
          std::mem_fn(&Greeter::Service::AmfAusfInteraction), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::ngcode::AmfSmfRequest, ::ngcode::AmfSmfReply>(
          std::mem_fn(&Greeter::Service::AmfSmfInteraction), this)));
}

Greeter::Service::~Service() {
}

::grpc::Status Greeter::Service::AmfAusfInteraction(::grpc::ServerContext* context, const ::ngcode::AmfAusfRequest* request, ::ngcode::AmfAusfReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::AmfSmfInteraction(::grpc::ServerContext* context, const ::ngcode::AmfSmfRequest* request, ::ngcode::AmfSmfReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace ngcode

